

// ----------- PINOS ---------------

#define pinEcho 10
#define pinTrig 11
#define pinSQW 2
#define pinRele 3
#define pinHL691 A3
#define pinHL692 A6
#define pinChuva A2
#define pinRtcSCL A5
#define pinRtcSDA A4
#define pinEncCLK 1
#define pinEncDT 0
#define pinEncBot 12
#define pinLcdRs 8
#define pinLcdE 9
#define pinLcdD4 4
#define pinLcdD5 5
#define pinLcdD6 6
#define pinLcdD7 7

// ---------- Constantes -------------
const int limiteChuva = 500;   // valor analógico limite para detectar chuva (experimental)

// -------- Variáveis EEPROM----------

int eeprom_alvo = 2; //local (inicial) dos dados das regas do primeiro conjunto //alvo é a cadeia de rega

int eeprom_bit_alvo = 0; //bit da cadeia de rega a ser modificado

// ---------- Funções ----------------
int leituraUmidade(int tempo); // função para leitura dos sensores HL69 - umidade do solo
float leituraVolume(int tempo, int d1, int d2, int altura); // função que calcula volume de água do reservatório utilizando o JSN-SR04T

// ==============================================================================================
//                                        SETUP
// ==============================================================================================

void setup() {

  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);
  
  digitalWrite(trig, LOW);
  
  EEPROM.update(0, 2);  //lugar e valor forçado, endereço ZERO (alvo ancora) aponta pro 2 , DEVE SER REMOVIDO NO CÓDIGO FINAL**********************
  EEPROM.update(1, 0);  //lugar e valor forçado, endereço UM (bit alvo) aponta pro (primiero bit) DEVE SER REMOVIDO NO CÓDIGO FINAL**********************

}

// ==============================================================================================
//                                         LOOP
// ==============================================================================================

void loop() {


}

// ==============================================================================================
//                             DESENVOLVIMENTO DAS FUNÇÕES
// ==============================================================================================


// -------------- LEITURA DA UMIDADE DO SOLO -----------

int leituraUmidade(int tempo){

  /*
  tempo = tempo de captação de dados dos sensores, em segundos
  */

  unsigned long delay1 = millis(); // auxiliar para monitorar tempo de leitura
  int cont = 0;   // conta quantidade de leituras para tirar a média
  int valor1_HL69 = 0; // valores de um sensor HL69
  int valor2_HL69 = 0; // valores de um sensor HL69
  
  while ((millis() - delay1) < tempo){ 
    valor1_HL69 += analogRead(pinHL691);
    valor2_HL69 += analogRead(pinHL692);
    cont0++;
  }
  int resultado_umidade = ( valor1_HL69 + valor2_HL69)/cont;   //média das médias dos valores lidos 
  resultado_umidade = map(resultado_umidade, 0, 1024, 0, 100);
  
  return resultado_umidade;
}

// -------------- LEITURA DO SENSOR DE CHUVA -----------

int leituraChuva(int tempo){

  /*
  tempo = tempo de captação de dados dos sensores, em segundos
  */

  unsigned long delay1 = millis(); // auxiliar para monitorar tempo de leitura
  int cont = 0;   // conta quantidade de leituras para tirar a média
  int valor_chuva = 0; // valores de um sensor de chuva
  
  while ((millis() - delay1) < tempo){ 
    valor_chuva += analogRead(pinChuva);
    cont++;
  }
  int resultado_chuva = valor_chuva/cont;   //média das médias dos valores lidos 
  resultado_chuva = map(resultado_chuva, 0, 1024, 0, 100);
  
  return resultado_chuva;
}


// ------------ CÁLCULO DO VOLUME DE ÁGUA -------------

float leituraVolume(int tempo, int d1, int d2, int altura){

  /*
  CONSIDERANDO UMA TANQUE DE ÁGUA COM FORMATO DE TRONCO...
  
  tempo = tempo de captação de dados do sensor, em segundos
  d1 = maior diâmtro do tanque, em metros
  d2 = menor diâmetro do tanque, em metros
  altura = altura total do tanque, em metros
  */
  
  // ******Cálculo da altura entre sensor e nível***** 

  unsigned long delay1 = millis(); // auxiliar para monitorar tempo de leitura
  int cont = 0;   // conta quantidade de leituras para tirar a média
  float valor_nivel = 0; // distância em cm do sensor JSN-SR04T

  while ((millis() - delay1) < tempo){
  
    digitalWrite(trig, HIGH); // emite o ultrassônico por 10 microsegundos
    delayMicroseconds(10);
    digitalWrite(trig, LOW);
    
    float pulso = (float) pulseIn(echo, HIGH); //mede o tempo do pino echo em HIGH em microsegundos
  
    valor_nivel += puslo/58.82; // distãncia convertida para cm - parâmetro do datasheet
    cont++;
  }
  
  valor_nivel /= 100; // distância em metros
  
  float distancia = valor_nivel/cont; //distância média em metros
  
  // ******** Cálculo do volume *******
  
  float r1 = d1/2;
  float r2 = d2/2;
  float pi = 3.14159;
  
  float rf = ((altura - distancia)*(r1-r2))/altura + r2;
  float volume_agua = (pi*(altura-distancia)*(rf*rf + rf*r2 + r2*r2))/3; //volume em metros cúbicos
  volume_agua *= 1000;  //volume de água em litros
  
  return volume_agua;
  
  // -------- Funções da EEPROM ---------------
  
 void checa_alvo(){
  //verifica e guarda em variavel, aponta pro proximo valor livre
  eeprom_alvo = EEPROM.read(0);
  }

void checa_bit_alvo(){
  //verifica e guarda em variavel, aponta pro proximo valor livre
  eeprom_bit_alvo = EEPROM.read(1);
  }
  
 void incrementa_alvo(){
  //incrementa pras proximas 8 regas
  EEPROM.update(0, eeprom_bit_alvo + 25);  //2,27,52...
  }

void incrementa_bit_alvo(){
  //incrementa pra proxima interação
  EEPROM.update(1, eeprom_bit_alvo + 1); //de 0 a 7, se for 8 nós iniciamos outra
  }
  
  
    //******* Função que guarda infos *****
    
  void guarda_eeprom(){
  if (eeprom_bit_alvo == 8){
    eeprom_bit_alvo = 0;//reinicia contagem
    incrementa_alvo(); //pula pro proximo conjunto
    }

  checa_alvo(); //atualizam valores
  checa_bit_alvo();


  int local = EEPROM.read(eeprom_alvo) + 3 * EEPROM.read(eeprom_bit_alvo);

  EEPROM.update(local, distancia);  //LINHA 147 VERIFICAR, CASO PRECISE MULTIPLICAR
  EEPROM.update(local + 1, resultado_chuva);  //LINHA 110
  EEPROM.update(local + 2, resultado_umidade);
  

  byte EEPROMbyte = EEPROM.read(eeprom_alvo);
  bitWrite(EEPROMbyte, eeprom_bit_alvo, rega);  //****************************Falta essa variável************
  EEPROM.update(eeprom_alvo, EEPROMbyte);

  incrementa_bit_alvo();
  }

}

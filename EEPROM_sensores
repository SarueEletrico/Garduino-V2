#include <EEPROM.h>

//EM CONSTRUÇÂO

//Plano de funcionamento da EEPROM - conjuntos de 25 bits - no qual o primeiro Byte é guardado pras 8 proximas regas, guardando se regou ou não
//Seriam as 8 regas e seus dados

//umidade - média dos sensores, descrito no código principal
//distância - em metro ou cm calculado no principal
#define chuva A2 //sensor de chuva - //chuva - diretamente pelo sensor

// o byte 0 da EEPROM contém o Byte que será trabalhado, conjunto de 8 medições
// o byte 1 da EEPROM contém o Bit que será trabalhado e consequentemente o Número da medição


int eeprom_alvo = 2; //local (inicial) dos dados do sensores

int eeprom_bit_alvo = 0; //local da info do bit do byte de rega




//os primeiros endereços da EEPROM serão para definir onde será escrito
//isso para caso ocorra perda de energia podemos revisitar este endereço
void setup() {
  //caso realmente seja a primeira vez precisamor forçar a EEPROM enderço 0 a ser 1
  Serial.begin(115200);
 
  pinMode(chuva, INPUT);
 
  EEPROM.update(0, 2);//lugar e valor forçado, DEVE SER REMOVIDO NO CÓDIGO FINAL**********************
  EEPROM.update(1, 0);//lugar e valor forçado, DEVE SER REMOVIDO NO CÓDIGO FINAL**********************
}

void checa_alvo(){
  //verifica e guarda em variavel, aponta pro proximo valor livre
  eeprom_alvo = EEPROM.read(0);
}


void checa_bit_alvo(){
  //verifica e guarda em variavel, aponta pro proximo valor livre
  eeprom_bit_alvo = EEPROM.read(1);
}

void incrementa_bit(){
  //incrementa pra proxima interação
  EEPROM.update(1, eeprom_bit_alvo + 25);  //2,27,52...
}

void incrementa_bit_alvo(){
  //incrementa pra proxima interação
  EEPROM.update(1, eeprom_bit_alvo + 1);
}


void incrementa_bit_alvo(){
  //incrementa pra proxima interação
  EEPROM.update(1, eeprom_bit_alvo + 1);
}


void guarda_eeprom(){
  int local = EEPROM.read(eeprom_alvo) + 4 * EEPROM.read(eeprom_bit_alvo)
  EEPROM.update(local, analogRead(nivel);  //depende de como e quantos bits tem o nível, nivel em float (VER ISSO)
  EEPROM.update(local + 1, analogRead(chuva));  //divide por quatro pois a EEPROM trabalha com menos bits,(VER ISSO, mapeado até 100)
  EEPROM.update(local + 2, analogRead(umidade1)/4);
  

  EEPROM.update(eeprom_alvo + 4, analogRead(regou)/4); //se regou ou não
  
  
}

//EEPROM só guarda até 255, então precisa dividir os analogs por 4
//Temos 1024 pra usar
void loop() {
  checa_alvo();
  //Serial.print("Valor alvo da eeprom:");
  //Serial.print(eeprom_alvo, DEC);
  //Serial.println();
  //Serial.print("Valor do potenciômetro ");
  //Serial.print(analogRead(potent),DEC);
  //Serial.println();

  guarda_eeprom();

  //Serial.print("Valor guardado na EEPROM:");
  //Serial.print(EEPROM.read(eeprom_alvo),DEC);
  //Serial.println();

  incrementa_alvo();
  delay(4000);

}

//uma tecnica pode ser: fazer o update do endereço 0 a cada 10 ou 20 mudanças, prolongando a vida da EEPROM
